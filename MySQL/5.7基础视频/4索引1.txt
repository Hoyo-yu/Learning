1二分查找法/折半查找法
  一种在有序数组中查找某一特定元素的搜索算法;
  二分查找法的优点是比较次数少,查找速度快,平均性能好;
  其缺点是要求待查表为有序表,且插入删除困难.
  因此二分查找方法适用于不经常变动而查找频繁的有序列表.

2二叉树
  二叉树的每个节点至多只有二棵子树(不存在度(阶)大于2的节点),二叉树的子树有左右有序之分,次序不能颠倒.

3平衡二叉树
  改进的二叉查找树.一般的二叉树的查询复杂度是跟目标节点到树根的距离(即深度)有关,因此当节点的深度普遍较大时,
  查询的均摊复杂度会上升,为了更高效的查询,有了平衡树.
  特点：
      它是一棵空树或其左右两个子树的高度差的绝对值不超过1,且左右两个子树也是平衡二叉树
      不平衡树会通过自旋,变成平衡树
      平衡树和不平衡树(普通的二叉树)最大的区别：前者时平衡的,后者不一定(也就是说前者是后者的特殊情况)

4B树(平衡多叉树)
  又称B-树
  B树,一个节点可以拥有多于2个子节点的多叉查找树
  适合大量数据的读写操作,普遍运用于数据库和文件系统
  一颗m阶(最大叶子节点数)的B数满足下列条件：
  树中的每个节点至多有m个子节点
  除根节点和叶子节点外,其他每个节点至少有m/2个子节点
  若根节点不适叶子节点,则这至少有2个子节点
  所有叶子节点都出现在同一层,叶子节点不包含任何键值(索引节点)信息
  有k个子节点的非叶子节点恰好包含k-1个键值(索引节点)

5B+树
  B+树是B树的变体,也是多路搜索树,其定义基本与B树相同,除了：
  所有数据都保存在叶子节点
  所有的叶子节点中包含了全部关键字的信息,及指向含这些关键字记录的指针,且叶子节点本身依关键字的大小自小而大顺序链接
  在MySQL中为了方便,直接携程BTREE
  一般三层的B+树足够用了,查找次数不超过3次

6哈希索引(散列索引)
  建立在哈希表的基础上,它只对使用了索引中的每个值得精确查找有用(等值查询)
  对于每一行,存储引擎计算出了被索引的hash code,把hash code保存在索引中,并且保存了一个指向哈希表中的每一行的指针.
  key-->h(key)-->去哈希表中找-->读到索引指向的记录  大量数据的情况下,可能存在两个不同的Key但是它的哈希值是一样的,它返回的记录可能有多条
  特点：
       大量为唯一值的等量查询,hash索引效率通常比B+树高
       哈希索引不支持模糊查找
       哈希索引不支持联合索引中的最左匹配规则
       哈希索引不支持排序
       哈希索引不支持范围查询
       哈希索引只能显式应用于heap/memory、NDB表

7索引的概念
  相当于目录,用于快速检索
  优点：
      提高数据检索效率
      提高表空间的join效率
      利用唯一性索引,保证数据的唯一性
      提高排序和分组效率
  缺点：
      消耗更多物理存储
      数据变更时,索引也需要更新,降低更新效率
  使用建议：
      经常检索的列
      经常用于表连接的列
      经常排序/分组的列
  不建议使用索引：
      基数很低的列
      更新频繁但检索不频繁的列
      BLOB/TEXT等长内容列
      很小用于检索的列

8聚集索引(clusterd index)
  聚集索引是一种索引,该索引中的键值的逻辑顺序决定了表数据行的物理顺序
  每张表只能建一个聚集索引,除了ToKuDB引擎
  InnoDB中,聚集索引即表,表即聚集索引(主键索引一定是聚集索引,但聚集索引不一定是主键索引;没有主键的情况下,innodb会用隐藏的列来做索引)
  隐藏的列(DB_TRX_ID事务ID,DB_ROLL_PTR回滚段的指针),用来实现MVCC(多版本并发控制)
  MyISAM没有聚集索引的概念
  ToKuDB可以选择任意的列作为聚集索引,并且支持多个聚集索引
  聚集索引优先选择列：
      INT/BIGINT
      数据连续(单调顺序)递增/自增
  不建议的聚集索引：
      修改频繁的列
      新增数据太过离散随机
  InnoDB聚集索引选择次序原则：
      显式生命的主键
      第一个NOT NULL的唯一索引
      ROWID(6bytes)

9主键索引(primary key)
  主键由表中的一个或多个字段组成,它的值用于唯一的标识表中的某一条记录
  在表引用中,主键在一个表中引用来自于另一个表中特定的记录(外键foreign key应用)
  保证数据的完整性
  加快数据的操作速度
  主键值不能重复,也不能包含NULL
  主键选择的建议：
      对业务透明,无意义,免受业务变化的影响
      很小修改和删除
      最好是自增的
      不要具有动态属性,例如随机值
  Index Extensions(5.6.9后的特性)：假如有一个主键索引(c1),另一个索引 k1(c2,c3,c4)（会变成联合索引c2,c3,c4,c1） 他在后面会带一个主键值(c1)
                                  像where c2=? and c3=? and c4=? order by c1;用到了这个特性
                                  像where c2=? order by c1;没有用到这个特性,但用到了索引(要看优化器的选择是c2还是c1,看cost小的(执行计划explain format=json))

10唯一索引(unique key)
  不允许具有索引值相同的行,从而禁止重复的索引或键值
  严格意义上讲,应该叫唯一约束
  在唯一约束上,和主键一样(以MyISAM引擎为代表)
  其他不同的方面:
               唯一索引允许有空值(NULL)
               一个表中只能有一个主键,但可以有多个唯一索引
               InnoDB表中主键必须是聚集索引,但聚集索引可能不是主键
               唯一索引约束可临时禁用,但主键不行
  select a,b from table_name where a=? and b=? 不需要回表(通过索引查整条记录)

11联合索引(Combined Indexes)
  多列组成,所以也叫多列索引(Multiple-Colume Indexes)
  适合where条件中的多列组合
  有时候,还可以用于避免回表(覆盖索引)
  MySQL在8.0起才支持多列不同排序规则(如倒序索引)
  联合索引建议：
              where条件中,经常同时出现的列放到联合索引中
              把选择性大的列放到联合索引的最左边
  
12覆盖索引(covering indexes)
  通过索引数据结构,即可直接返回数据,不需要回表
  执行计划中,Extra列会显示关键字using index