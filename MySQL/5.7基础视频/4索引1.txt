1二分查找法/折半查找法
  一种在有序数组中查找某一特定元素的搜索算法;
  二分查找法的优点是比较次数少,查找速度快,平均性能好;
  其缺点是要求待查表为有序表,且插入删除困难.
  因此二分查找方法适用于不经常变动而查找频繁的有序列表.

2二叉树
  二叉树的每个节点至多只有二棵子树(不存在度(阶)大于2的节点),二叉树的子树有左右有序之分,次序不能颠倒.

3平衡二叉树
  改进的二叉查找树.一般的二叉树的查询复杂度是跟目标节点到树根的距离(即深度)有关,因此当节点的深度普遍较大时,
  查询的均摊复杂度会上升,为了更高效的查询,有了平衡树.
  特点：
      它是一棵空树或其左右两个子树的高度差的绝对值不超过1,且左右两个子树也是平衡二叉树
      不平衡树会通过自旋,变成平衡树
      平衡树和不平衡树(普通的二叉树)最大的区别：前者时平衡的,后者不一定(也就是说前者是后者的特殊情况)

4B树(平衡多叉树)
  又称B-树
  B树,一个节点可以拥有多于2个子节点的多叉查找树
  适合大量数据的读写操作,普遍运用于数据库和文件系统
  一颗m阶(最大叶子节点数)的B数满足下列条件：
  树中的每个节点至多有m个子节点
  除根节点和叶子节点外,其他每个节点至少有m/2个子节点
  若根节点不适叶子节点,则这至少有2个子节点
  所有叶子节点都出现在同一层,叶子节点不包含任何键值(索引节点)信息
  有k个子节点的非叶子节点恰好包含k-1个键值(索引节点)

5B+树
  B+树是B树的变体,也是多路搜索树,其定义基本与B树相同,除了：
  所有数据都保存在叶子节点
  所有的叶子节点中包含了全部关键字的信息,及指向含这些关键字记录的指针,且叶子节点本身依关键字的大小自小而大顺序链接
  在MySQL中为了方便,直接携程BTREE
  一般三层的B+树足够用了,查找次数不超过3次

6哈希索引(散列索引)
  建立在哈希表的基础上,它只对使用了索引中的每个值得精确查找有用(等值查询)
  对于每一行,存储引擎计算出了被索引的hash code,把hash code保存在索引中,并且保存了一个指向哈希表中的每一行的指针.
  key-->h(key)-->去哈希表中找-->读到索引指向的记录  大量数据的情况下,可能存在两个不同的Key但是它的哈希值是一样的,它返回的记录可能有多条
  特点：
       大量为唯一值的等量查询,hash索引效率通常比B+树高
       哈希索引不支持模糊查找
       哈希索引不支持联合索引中的最左匹配规则
       哈希索引不支持排序
       哈希索引不支持范围查询
       哈希索引只能显式应用于heap/memory、NDB表

7索引的概念