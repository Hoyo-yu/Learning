MySQL的复制是一个逻辑类型的复制,重演SQL
**复制中出现错误后,一定要在当天进行主从一致性的校验
1复制中断(数据与主库冲突)
有主键或唯一索引才能判断一条数据是唯一的
1)1062错误
从库上有一条与主库上主键列相同的记录,或有一张与主库上相同的表.

** 不要在主库和从库上做reset master

模拟1062错误
  Master：
  use test1;
  create table test_table(id int not null,uname varchar(32),primary key(id));
  insert into test_table(id,uname) values(1,'test-data');
  
  Slave:
  **set sql_log_bin=0;#会话级别的,影响的是sql_thread,binlog会从Master同步过来,只是slave这边暂停对binlog的写入
  insert into test_table(id,uname) values(2,'python');

  Master:
  insert into test_table(id,uname) values(2,'java');

**修复操作：
  set sql_log_bin=0;
  delete from test1.test_table where id=2;
  set sql_log_bin=1;
  start slave sql_thread;

2)1032错误(补主键或唯一索引的列)
从库中出现少数据,delete,update操作时,找不到相应的记录.
模拟update操作导致的1032错误
  Master:
  use test1;
  create table test_table1(id int not null,uname varchar(32),primary key(id));
  insert into test_table1(id,uname) values(1,'wubx'),(2,'mysql'),(3,'python');

  Slave:
  set sql_log_bin=0;
  delete from test1.test_table1 where id=3;
  set sql_log_bin=1;

  Master:
  update test1.test_table1 set uname='java' where id=3;

**修复操作：
  Master:
**解析binlog日志/usr/local/mysql/bin/mysqlbinlog -v --base64-output=decode-rows --start-position=1467(Exec_Master_Log_Pos) --stop-position=2125(Last_SQL_Error中的End_Master_Log_Pos) mysql-bin.000012(Relay_Master_Log_File)
  #找到修改的数据
  Slave:
  use test1;
  set sql_log_bin=0;
  insert into test_table1(id) values(3);
  set sql_log_bin=1;
  start slave sql_thread;

executed_gtid_set:表示已经执行完的事务
retrieved_gtid_set:表示接收到的gtid集合

模拟delete操作导致的1032错误
  Master:
  use test1;
  create table test_table1(id int not null,uname varchar(32),primary key(id));
  insert into test_table1(id,uname) values(1,'wubx'),(2,'mysql'),(3,'python');

  Slave:
  set sql_log_bin=0;
  delete from test1.test_table1 where id=3;
  set sql_log_bin=1;

  Master:
  delete from test1.test_table1 where id=3;

**修复操作：注册一个空事务
stop slave;
set gtid_next='fbe2bbbd-223a-11eb-9039-000c297c33d3:2126';
begin;commit;
set gtid_next='AUTOMATIC';
start slave;


大前提：
在主库上创建一个表create table test_xz(id int);
在从库上drop table test_xz;
在主库上drop table test_xz;
从库都会停在:drop table找不到表的报错,你会神奇的发现所有从库都停在同一个GTID位置,同样的Relay_master_log_file,Exec_Master_Log_Pos.


Master->s1,Master->s2,Master->s3(也就是一主三从的结构)      ---------------1
Master-s1->s2,Master->s1->s3     ---------------2

(1)(1->2):

**传统复制(无gtid)
在M(172.16.1.3)上利用复制出错将s1(172.16.1.4),s2(172.16.1.5),s3(172.16.1.6)停到同一位置
在Master上执行set sql_log_bin=0;create table test_x(id int);set sql_log_bin=1;drop table test_x;
在M上show master status;获取file和position的内容,在s2和s3上change master to设置为M和s1相关的内容
# change master to master_host='172.16.1.4',master_port=3306,Master_Log_File='xxx', Master_Log_Pos=xxx;
再修复s1

**有gtid的复制
stop slave;
直接change master to 设置为s1相关的内容
# change master to master_host='172.16.1.4',master_auto_position=1;
start slave;
再修复s1

(2)(2->1):
**传统复制(无gtid)
在M上利用复制出错将s1,s2,s3停到同一位置
在Master上执行set sql_log_bin=0;create table test_x(id int);set sql_log_bin=1;drop table test_x;
在s1上show slave status;获取Relay_Master_Log_File(file)、Exec_Master_Log_Pos(pos)的值,在s2和s3上change master to设置为s1相关的内容
# change master to master_host='172.16.1.3',master_port=3306,Master_Log_File='file', Master_Log_Pos=pos;  都要在s2和s3上先stop slave,然后再change master to,再start slave

**有gtid的复制
stop slave;
直接change master to 设置为s1相关的内容
# change master to master_host='172.16.1.3',master_auto_position=1;
start slave;
再修复s1

(3)M->s1->s2,M->s3->s4;    s1挂了(死了),如何让s2与M保持

2复制延迟排查(skip-slave-start)
1)搞明白当前的数据库在干什么(解析)
/usr/local/mysql/bin/mysqlbinlog -v --base64-output=decode-rows --start-position=1467(Exec_Master_Log_Pos) --stop-position=2125(Last_SQL_Error中的End_Master_Log_Pos) mysql-bin.000012(Relay_Master_Log_File)
2)查看mysql当前SQL的状态
perf top mysqld
3)利用perf top查看MySQL的调度情况
http://t.cn/RSKYDg

从库某个表没有索引stop slave执行不了,果断重启(my.cnf加skip-slave-start)(不建议kill -9),加索引

ps-osc,gh-ost工具(alter加索引可用),影响复制延迟

3主从一致性校验
pt-table-checksum(percona-toolkit)
wget https://www.percona.com/downloads/percona-toolkit/3.2.1/binary/redhat/7/x86_64/percona-toolkit-3.2.1-1.el7.x86_64.rpm
yum localinstall percona-toolkit-3.2.1-1.el7.x86_64.rpm
yum install perl perl-devel perl-Time-HiRes perl-DBI perl-DBD-MySQL

主库上执行
pt-table-checksum --recursion-method="processlist" \
--replicate="test1.checksums" \
--host='172.16.1.3' \
--port=3306 \
--user='root' \
--password='luling1012' \
--databases=test1 \
--no-check-binlog-format
查看errors和diffs大于0主从就是不一致的


测试   在从库上增删改,使主从不一致,在主库上进行主从一致性校验
怎么校验出来的？
在主库set global general_log=1(show variables like '%gen%';)
在从库上增删改,使主从不一致
在主库上进行主从一致性校验
查看general.log

模拟主从不一致
在Slave上：set sql_log_bin=0;
通过增删改将从库中的某些数据改变(尽量改变没有外键的表)
在Slave上：set sql_log_bin=1;

解决主从不一致的问题(pt-table-sync)
pt-table-sync --replicate=test1.checksums h=172.16.1.3,u=root,p=password,P=3306 --execute(--print)
#仅没有外键的表
