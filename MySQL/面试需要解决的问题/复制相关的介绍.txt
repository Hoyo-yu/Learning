1异步复制、半同步复制、增强半同步复制
  传统的异步复制存在数据丢失的情况,不建议使用,是基于binlog position的复制,要求slave有基准数据并且binlog的position位置一致
  如果slave连接master时指定的binlog文件错误或者position(局部的)错误,会造成遗漏或者重复,很多时候数据是有依赖性的,这样就会出错导致数据不一致

  MySQL默认的复制即是异步的,主库执行完客户端提交的事务后会立即将结果返回给客户端,并不关心从库是否已经接受并处理。这样就会存在一个问题,主如果crash掉了,此时主上已经提交的事务可能并没有传到从上,如果此时,强行将从提升为主,可能导致新主上的数据不完整,出现数据不一致的问题
  
  半同步和增强半同步能确保已经提交的事务全部同步到至少一个从库中去,强数据完整性,并解决了幻读的问题
  增强半同步:after_sync(默认)和after_commit

2gtid(uuid+事务id)
  全局事务ID,它不要求复制前slave有基准数据(master中的binlog完整),也不要求binlog的position一致
  全局事务ID,所以slave在同步的时候不需要指定pos和binlog文件,MySQL会通过内部机制GTID自动找点同步
  通过gtid保证每个主库上提交的事务在集群中有一个唯一的ID,这种方式强化了数据库的主备一致性,故障恢复及容错能力

  优点:保证同一个事务在某slave上绝对只执行一次,没有执行过的gtid事务总是会被执行
       不用像传统复制那样保证binlog的坐标准确,因为根本不需要binlog及坐标
       故障转移到新的master的时候很方便,简化了很多任务
       很容易判断master和slave的数据是都一致,只要master上提交的事务在slave也提交了,那么一定是一致的

  gtid_excuted:表示已经执行过的gtid,reset master会清空该项的全局变量值

3主从复制原理

数据库有个bin-log二进制文件，记录了所有sql语句。
我们的目标就是把主数据库的bin-log文件的sql语句复制过来。
让其在从数据库的relay-log重做日志文件中再执行一次这些sql语句即可。
具体需要三个线程来操作：
(1)主库dump线程:每当有从库连接到主库的时候，主库都会创建一个dump线程然后发送binlog（二进制日志）内容到从库。在从库里，当复制开始的时候，从库就会创建两个线程进行处理：
(2)从库IO线程:当START SLAVE语句在从库开始执行之后，从库创建一个IO线程，该线程连接到主库并请求主库发送binlog里面的更新记录到从库上。从库IO线程读取主库的binlog输出线程发送的更新并拷贝这些更新到 relay log 文件。
(3)从库的SQL线程:从库创建一个SQL线程，这个线程读取从库IO线程写到 relay log 的更新事件并执行。从而实现主从的操作一致，最终数据一致；

总之,slave是根据master的binlog二进制(记录了数据库的所有操作,是在server层完成的)日志完成复制的

主从复制的用途：
(1)做数据的热备；作为后备数据库，主数据库服务器故障后，可切换到从数据库继续工作，避免数据丢失。（实时灾备，用于故障切换）
(2)读写分离，使数据库能支撑更大的并发；在报表中尤其重要。由于部分报表sql语句非常的慢，导致锁表，影响前台服务。如果前台使用master，报表使用slave，那么报表sql将不会造成前台锁，保证了前台速度

半同步复制解决数据丢失的问题
并行复制解决从库复制延迟的问题

主从部署必要条件：
(1)主库开启binlog日志
(2)主从server-id不同
(3)slave服务器能连通master

4基于GTID的主从复制原理
(1)master更新数据时,会在事务开始前产生GTID,一同记录到binlog中
(2)每当有slave连接到master的时候,master都会创建一个dump线程然后发送binlog内容到slave
(3)slave端的IO线程将变更的binlog,写入到本地的relay log中 
(4)slave端的SQL线程从relay log中获取GTID,然后对比slave端的binlog是都有记录
   如果有记录,说明该GTID事务已经执行,slave会忽略
   如果没有记录,slave就会从relay log中执行该GTID的事务,并记录到binlog中
   在读取执行事务前会先检查其他session持有该GTID，确保不被重复执行。
(5)在解析过程中会判断是否有主键，如果有就用二级索引，如果没有就用全部扫描。

5推荐使用的复制方案
GTID+row+增强半同步