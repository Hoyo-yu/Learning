1、Innodb的体系结构：innodb存储引擎有多个内存块，组成一个大的内存池，负责以下工作。
（1）维护所有进程/线程需要访问的多个内部数据结构。
（2）缓存磁盘上的数据，方便快速读取，同时在对磁盘文件的数据修改之前在这里缓存。
（3）重做日志（redo log）缓冲…
2、后台线程
    主要作用是负责刷新内存池中的数据，保证缓冲池中的内存缓存的是最近的数据。
3、四个重要的后台线程:
（1）Master Thread是一个非常核心的后台线程，主要负责将缓冲池中的数据异步刷新到磁盘，保证数据的一致性，包括脏页的刷新、合并插入缓冲、undo页的回收等。
（2）IO Thread，在innodb存储引擎中大量使用了AIO（Async IO）来处理写IO请求，这样可以极大提高数据库的性能，IO Thread主要负责这些IO请求的回调（call back）处理。
（3）Purge Thread，事务被提交后，其所使用的undo log可能不在需要，因此需要Purge Thread来回收已经使用并分配的undo页。
（4）Page Cleaner Thread其作用是将之前版本中的脏页的刷新操作都放到单独的线程中来完成，目的是为了减轻原Master Thread的工作及对于用户查询线程的阻塞，进一步提高了innodb的性能。
4、缓冲池
innodb是基于磁盘存储的，并将其中的记录按照页的方式进行管理，因此可以将其视为基于磁盘的数据库系统。
它通常使用缓冲池技术来提高数据库的整体性能。缓冲池简单来说就是一块内存区域，通过内存的速度来弥补磁盘速度较慢对数据库性能的影响。
缓冲池中的数据页累心有：索引页、数据页、undo页、插入缓冲、自适应哈希索引、innodb存储的锁信息、数据字典信息等，前两者占了很大的比重。
可以通过参数innodb_buffer_pool_size来设置。允许有多个缓冲池实例，可以通过innodb_buffer_pool_instance来设置。information_schema.innodb_buffer_pool_stats来查看状态。
5、读取页的操作
首先将从磁盘读取到的页存放到缓冲池中，这个过程称为将页FIX在缓冲池中，下一次再读相同的页时，首先会判断该页是否在缓冲池中
在数据库中修改页的操作，首先修改缓冲池中的页，然后再以一定的频率刷新到磁盘上
需要注意的是，页充缓冲池刷新回磁盘的操作并不是在每次页发生更新时触发而是通过一种称为checkpoint的机制刷新回磁盘。
6、LRU List、Free List和Flush List：
（1）LRU,数据库中的缓冲池是通过LRU（Latest Recent Used）算法来进行管理的。
     即最频繁使用的页在LRU列表的最前端，而最少使用的页在LRU的尾端，优先释放LRU列表中尾端的页。
     缓冲池页的大小默认是16k，Innodb存储引擎对LRU算法进行了一些优化最新访问的页是放在LRU的midpoint，默认是5/8位置处。midpoint之前的位置是最为活跃的热点数据。
     innodb引擎支持压缩页的功能，由于页的大小发生了改变，LRU列表也有了些许的改变
（2）Free List，当数据库刚启动时，LRU列表中的数据是空的，这时页都放在Free列表中。
（3）Flush List缓冲池中的页和磁盘中的页不一致时，数据库会通过checkpoint机制将脏页数据刷新回磁盘，而flush列表中的页即为脏页列表
     需要注意的是，脏页即存在于LRU列表中，也存在于FLush List中，LRU列表用来管理缓冲池中页的可用性，Flush列表用来管理将页刷新回磁盘，两者互不影响。
7、脏页
缓冲池中的页和磁盘上的页的数据产生了不一致。
可以通过show engine innodb status中的modified db page来查看脏页的数量。
8、重做日志缓冲
innodb引擎首先将重做日志信息放到这个缓冲区，然后按一定的频率将其刷新到重做日志文件，重做日志缓冲一般不需要设置得很大，因为一般情况下每一秒钟会将重做日志缓冲刷新到日志文件
