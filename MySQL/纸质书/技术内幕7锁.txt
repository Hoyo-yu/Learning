1lock和latch
  latch：一般称为轻量锁,因为其要求锁定的时间必须非常短,若持续的时间长,则应用的性能会非常差
         在InnoDB存储引擎中,latch可以分为mutex(互斥量)和rwlock(读写锁)
         目的是用来保证并发线程操作临界资源的正确性,并且通常没有死锁检测的机制
         可以通过show engine innodb mutex;
  lock:其对象是事务,用来锁定的数据库中的对象,如表、页、行 ##
       并且一般lock的对象仅在事务commit或rollback后释放(不同事务隔离级别释放的时间可能不同)
       此外,lock是有死锁机制的
       可以通过：show engine innodb status\G;
                select * from information_schema.innodb_trx\G;
                select * from information_schema.innodb_locks\G;
                select * from information_schema.innodb_lock_waits\G;...
                show tables like ''

2InnoDB存储引擎层的锁
  InnoDB存储引擎实现了如下两种标准的行级锁：
  共享锁(S):允许事务读一行数据(lock in share mode)
  排他锁(X):允许事务删除或更新一行数据(for update)
  X锁与X,S都不兼容,S锁仅和S锁兼容,特别需要注意的是,因为两者都是行锁,兼容指的是同一记录(row)锁的兼容性情况

  此外,InnoDB存储引擎支持多粒度(granular)锁定,这种锁定允许事务在行级上的锁和表级上的锁同时存在

  意向锁：InnoDB存储引擎支持意向锁比较简练,其意向锁是表级别的锁
         设计目的：为了在下一个事务中揭示下一行将被请求的锁类型
  类别：
      意向共享锁(IS):事务想要获取一张表中某几行的共享锁
      意向排他锁(IX):事务想要获取一张表中某几行的排他锁

  由于InnoDB存储引擎支持的是行级别的锁,因此意向锁其实不会阻塞除全表扫描以外的任何请求
  表级意向锁与行级锁的兼容性见 5.7基础视频\6MySQL锁：意向锁与行级锁的兼容性.jpg

3一致性非锁定读

4一致性锁定读

5经典死锁案例(172.16.1.5修改了innodb_lock_wait_timeout)
  场景1：多个insert语句导致的死锁问题
       create table t1 (c1 int not null,c2 int,primary key(c1),unique key(c2));
  场景2：事务回滚导致的死锁问题
       