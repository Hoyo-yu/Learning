1认识事务
  事务是访问并更新数据库中各种数据项的一个程序执行单元,事务可由一条简单的SQL语句组成,也可以是一组复杂的SQL语句组成
  理论上说,事务有着极其严格的定义,它必须同时满足四个特性(ACID)

  四个特性介绍：mysql调优\事务的ACID特性.txt 

2事务的分类
  扁平事务：
          在扁平事务中,所有操作都处于同一层次,由begin work开始,由commit work或rollback work结束,其间的操作是原子的,要么都执行,要么都回滚
          扁平事务是应用程序成为原子操作的基本组成模块,扁平事务虽然简单,但在实际生产环境中使用最为频繁
          扁平事务的主要限制是不能提交或者回滚事务的某一部分,或分几个步骤提交
  带有保存点的扁平事务：
          除了支持扁平事务支持的操作外,允许在事务执行过程中回滚到同一事务中较早的一个状态
          保存点用来通知系统应该记住事务当前的状态,以便之后发生错误时,事务能回滚到保存点当时的状态
  链事务：
          可视为保存点模式的一种变种,带有保存点的扁平事务,当发生系统崩溃时,所有的保存点都将会消失,因为保存点是易失的,而非持久的,这意味着当进行恢复时,事务需要从开始重新执行,而不能从最近的一个保存点继续执行

          在提交一个事务时,释放不需要的数据对象,将必要的处理上下文隐式的传给下一个要开始的事务,注意提交事务操作和开始下一个事务操作将合并为一个原子操作,这意味着下一个事务将看到上一个事务的结果,就好像是在一个事务中进行的一样

          链事务与带有保存点的扁平事务不同的是,带有保存点的扁平事务能回滚到任意正确的保存点,而链事务中的回滚仅限于当前事务,即只能恢复到最近一个保存点
          对于锁的处理,链事务在执行commit后即释放当前事务所持有的锁,而带有保存点的扁平事务不影响迄今为止所持有的锁
  嵌套事务：
          是一个层次结构框架,有一个顶层事务控制着各个层次的事务,顶层事务之下嵌套的事务被称为子事务,其控制每一个局部的变换
  分布式事务：
          通常是一个在分布式环境下运行的扁平事务,因此需要根据数据所在位置访问网络中的不同节点
          例：假如有3个节点ABC,A为ATM机,B为招商银行的后台数据库,C工商银行的后台数据库,模拟一个持卡人从招商一行的储蓄卡转账1000到工商银行的储蓄卡
          1)节点A发出转账命令
          2)节点B执行储蓄卡中的余额值减去1000
          3)节点C执行储蓄卡中的余额值加上1000
          4)节点A通知用户操作完成或者节点A通知用户操作失败
          对于分布式事务,其同样需要满足ACID特性
    
    对于InnoDB存储引擎来说,其支持扁平事务、带有保存点的事务、链事务、分布式事务

3事务的实现(redo,undo,purge,group commit)
  **事务的隔离性由锁来实现,事务的原子性和持久性由redo log(重做日志)来实现,事务的一致性由undo log(回滚日志)来实现
  redo恢复提交事务修改的页操作;undo回滚行记录到某个特定版本
  redo通常是物理日志,记录的是页的修改操作;undo是逻辑日志,根据每行记录进行记录
  redo log用来保证事务的持久性;undo log用来帮助事务回滚及MVCC的功能
  redo log基本都是顺序写的,在数据库运行时不需要对redo log的文件进行读取操作;undo log是需要进行随机读写的

  redo:(ib_logfile)
      重做日志用来实现事务的持久性,由两部分组成：一是内存中的重做日志缓冲(redo log buffer),易失的;二是重做日志文件(redo log file),持久的
      InnoDB是事务的存储引擎,其通过Force Log at Commit机制实现事务的持久化,即当事务提交时,必须先将该事务的所有日志(在InnoDB中,redo log和undo log组成)写入到重做日志文件进行持久化,待事务的commit操作完成才算完成

      为了确保每次日志都写入重做日志文件,在每次将重做日志缓冲写入到重做日志文件后,InnoDB存储引擎都需要调用一次fsync操作(为了确保重做日志写入到磁盘),由于fsync的效率取决于磁盘的性能,因此磁盘的性能决定了事务提交的性能,也就是数据库的性能

      InnoDB存储引擎允许用户手工设置非持久化的情况发生,以此来提高数据库的性能,即当事务提交时,日志不写入重做日志文件,而是等待一个时间周期后再进行fsync操作(innodb_flush_log_at_trx_commit来控制,默认值为1,表示事务提交时必须调用一次fsync操作)

      在MySQL数据库中还有一种二进制日志(binlog),其用来进行(point-in-time(PIT)基于时间点的)恢复及主从复制环境的建立
      redo和binlog的区别：
                        重做日志是在InnoDB存储引擎层产生,二进制日志时在MySQL数据库的上层产生的(Server层),二进制日志在MySQL数据库中的任何存储引擎都会产生
                        两种日志记录的内容形式不同,binlog是一种逻辑日志,其记录的是对应的SQL语句;重做日志是物理格式日志,其记录的是对于每个页的修改
                        binlog只在事务提交完成后进行一次写入;重做日志在事务进行中不断的写入,这表现为日志并不是随事务提交的顺序进行写入的

      log block：
        在InnoDB存储引擎中,重做日志都是以512字节进行存储的,这意味着重做日志缓存、重做日志文件都是以块的方式进行保存的,称之为日志块(redo log block),每块的大小为512字节

        若一个页中产生的重做日志数量大于512字节,那么需要分割为多个重做日志块进行存储,此外,由于重做日志块和磁盘扇区大小一样,都是512字节,因此重做日志的写入可以保证原子性,不需要doublewrite技术

      log group:
        是一个逻辑上的概念,并没有一个实际存储的物理文件来表示log group信息,log group由多个重做日志文件组成,每个log group中的日志文件大小总是相同的
        重做日志文件中存储的就是之前在log buffer中保存的log block,因此也是根据块的方式进行物理存储的管理,每个块的大小与log block一样,同样都是512字节
        在InnoDB存储引擎运行过程中,log buffer根据一定的规则将内存中的log block刷新到磁盘,这个规则是：事务提交时、当log buffer中有一半的内存空间已经被使用时、log checkpoint时

      重做日志格式：
        InnoDB存储引擎的存储管理是基于页的,故重做日志格式也是基于基于页的

      LSN：
        LSN是Log Sequence Number的缩写,其代表的是日志序列号,在InnoDB存储引擎中,LSN占用8个字节并且单调递增,LSN表示的含义有：重做日志写入的总量、checkpoint的位置、页的版本
        LSN表示写入重做日志的字节的总量,LSN不仅记录在重做日志中,还存在于每个页中
        show engine innodb status\G;
    
      恢复：
        InnoDB存储引擎在启动时不管上次数据库运行时是否正常关闭,都会尝试进行恢复操作
        因为重做日志记录的是物理日志,因此恢复的速度比逻辑日志(比如binlog)要快的多,InnoDB存储引擎自身也对恢复进行了一定程度的优化,如顺序读取及并行应用重做日志,这样可以进一步的提高数据库恢复的速度
  
  undo:
      重做日志记录了事务的行为,可以很好的通过其对页进行重做操作,但是事务有时还需要进行回滚操作,这是就需要undo
      在对数据库进行修改时,InnoDB存储引擎不但会产生redo,还会产生一定量的undo
      redo存放在重做日志中,与redo不同,undo存放在数据库内部的一个特殊段中,这个段称为undo段(undo segment),undo段位于共享表空间中
      除了回滚操作,undo的另一个作用是MVCC,即在InnoDB存储引擎中MVCC是通过undo来实现的,当用户读取一行记录时,若该记录已经被其他事务占用,当前事务可以通过undo读取之前的行版本信息,以此实现非锁定读
      undo log会产生redo log,也就是说undo log的产生会伴随着redo log的产生,这是因为undo也需要持久性的保护

      undo存储管理：
        InnoDB存储引擎对undo的管理同样采用段的方式,InnoDB存储引擎有rollback segment,每个rollback segment中记录了1024个undo log segment,在每个undo log segment段中进行undo页的申请
        InnoDB1.1以前只有一个rollback segment,因此支持同时2在线的事务限制为1024;1.1支持128个rollback segment,故其支持同时在线的事务限制提高到了128*1024
        InnoDB1.2前,rollback segment段都存储于共享表空间中,InnoDB1.2版本开始,可以通过参数对rollback segment做进一步的设置,参数包括：
          innodb_undo_directory、innodb_undo_logs、innodb_undo_tablespaces

        需要特别注意的是,事务在undo log segment分配页并写入undo log的这个过程同样需要写入重做日志,当事务提交时,InnoDB存储引擎会做一下两件事情：
          将undo log放入列表中,以供之后的purge操作
          判断undo log所在的页是否可以重用,若可以分配给下一个事务使用
        事务提交后并不能马上删除undo log及undo log所在的页,因为可能还有其他事务需要通过undo log来得到行记录之前的版本,故将事务提交时将undo log放入一个链表中,是否可以删除undo log和undo log所在的页由purge线程来判断

  purge:
      delete和update操作可能并不能直接删除原有的数据,因为InnoDB存储引擎支持MVCC,所以记录不能在事务提交时立即进行处理,可能其他事务正在引用,InnoDB存储引擎需要保存记录之前的版本
      如果被其他事务所引用,就需要等待其他事务不在引用了,最后通过purge来清理之前的delete和update操作,将上述的操作最终完成;反之,就可以进行真正的delete操作

  group commit:
      对于InnoDB存储引擎来说,事务提交时会进行两个阶段的操作：
        (1)修改内存中事务对应的信息,并且将日志写入重做日志缓冲
        (2)调用fsync确保日志都从重做日志缓冲写入到磁盘
      
      为了保证MySQL数据库上层二进制日志的写入顺序和InnoDB层的事务提交顺序一致(备份和恢复的需要),MySQL数据库内部使用了prepare_commit_mutex这个锁以串行的方式来保证顺序性,这会使group commit无法生效
      为了更好的解决这个问题,不仅在MySQL数据库上层的二进制日志写入是group commit的,而且在InnoDB存储引擎层也是group commit的,此外还可以移除prepare_commit_mutex锁,从而大大提高了数据库的整体性

      5.6采用了类似的实现方式,Binary Log Group Commit(BLGC)
      在MySQL数据库上层进行提交时首先按顺序将其放入一个队列中,队列中的第一个事务称为leader,其他事务称为follower,leader控制着follower的行为
      BLGC的三个步骤：
          Flush阶段：将每个事务的二进制日志写入内存中
          Sync阶段：将内存中的二进制日志刷新到磁盘,若队列中有多个事务,那么仅一次fsync操作就完成了二进制日志的写入
          Commit阶段：leader根据顺序调用存储引擎层事务的提交,InnoDB本就支持group commit
        
4隐式提交的SQL语句
  DDL语句:alter database ... upgrade data directory name,alter event,alter procedure,alter table,alter view,create dateabase,create event,create index,create procedure 
          create table,create trigger,create view,drop database,drop event,drop index,drop procedure,drop table,drop trigger,drop view,rename table,truncate table
  DCL语句:create user,drop user,grant,rename user,revoke,set password
  管理语句:analyze table,cache index,check table,load index into cache,optimize table,repair table

5对于事务操作的统计
  QPS(每秒请求数)：
  TPS(每秒事务处理的能力)：(Com_commit + Com_rollback) / seconds,前提是所有的事务必须都是显式提交的,如果存在隐式的提交和回滚(默认autocommit=1),不会计算到com_commit和com_rollback变量中

6事务的隔离级别

7分布式事务