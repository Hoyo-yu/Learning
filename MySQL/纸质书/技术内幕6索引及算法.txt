1InnoDB存储引擎索引概述
  InnoDB存储引擎支持几种常见的索引：B+树索引、全文索引、哈希索引
  哈希索引：InnoDB存储引擎支持的哈希索引是自适应的,InnoDB存储引擎会根据表的使用情况自动生成哈希索引,不能认为干预
  B+树索引：传统意义上的索引,这是目前关系型数据库系统中查找最为常见和最有效的索引,B+树索引构造类似于二叉树,根据键值快速找到数据
  注：B+树索引并不能找到一个给定键值的具体行,B+树索引能找到的只是被查找数据行所在的页,然后数据库通过把页读入到内存,再在内存中进行查找,最后得到要查找的数据

2数据结构与算法
  二分查找法
  二叉查找树
  平衡二叉树
  B+树：是为磁盘或其他直接存取辅助设备设计的一种平衡查找树。在B+树种,所有记录都是按键值的大小顺序存放在同一层的叶子节点上,由各叶子节点指针进行连接

3B+树索引
  B+树索引的本质就是B+树在数据库中的实现,B+树索引在数据库中有一个特点是高扇出性,因此在数据库中,B+树的高度一般都是在2-4层,这就是说查找某一键值的行记录最多只需要2到4
  次的磁盘IO,因为一般的机械磁盘每秒至少可以做100次IO,2-4次的IO意味着查询时间只需0.02-0.04s

  数据库中的B+树索引可以分为聚集索引和辅助索引。两者的内部都是B+树结构,即高度平衡的,叶子节点存放着所有的数据;
  区别是:叶子节点存放的是否是一整行的数据

4聚集索引
  InnoDB存储引擎表是索引组织表,即表中的数据按照主键的顺序存放;而聚集索引就是按照每张表的主键构造一棵B+树,同时叶子节点中存放的即为整张表的行记录数据,也将聚集索引的叶子节点称为数据页。
  聚集索引的这个特性决定了索引组织表中数据也是索引的一部分,同B+树数据结构一样,每个数据页都通过一个双向链表来进行链接。

5辅助索引(非聚集索引)
  辅助索引：叶子节点并不包含行记录的全部数据。叶子节点处理包含键值以外,每个叶子节点中的索引行中还包含了一个书签,该书签同来告诉InnoDB存储引擎哪里可以找到与索引相对应的行数据
           由于InnoDB存储引擎表是索引组织表,因此InnoDB存储引擎的辅助索引的书签应该就是行数据的聚集索引键
  辅助索引的存在并不影响数据在聚集索引中的组织,因此每张表上可以有多个辅助索引
  查看索引：show index from table_name;
           Cardinality:非常关键的值,表示索引中唯一值的数目的估计值
           Cardinality为NULL,在某些情况下可能发生索引建立了没有使用的情况,或者对两台基本一样的语句执行explain,但是最终出来的结果不一样;这时最好的解决办法就是做一次analyze table table_name操作(非高峰期),这能使优化器和索引更好的为你工作
    
6OSC(Online Schema Change)
  最早是由Fackbok实现的一种在线执行DDL的方式,所谓'在线'是指在事务的的创建过程中,可以有读写事务对表进行操作,这提高了原有MySQL数据库在DDL操作时的并发性

7online DDL
  虽然FIC(Fast Index Creation)可以让InnoDB存储引擎免创建临时表,从而提高索引创建的效率
  下面几类DDL操作都可以通过在线的方式：辅助索引的创建和删除、改变自增长值、添加或删除外键约束、列的重命名
  需要注意的是：由于Online DDL在创建索引完成后再通过重做日志达到数据库的最终一致性,这意味着在索引创建过程中,SQL优化器不会选择正在创建中的索引

8Cardinality值
  并不是在所有的查询条件中出现的列都需要添加索引,对于什么时候添加B+树索引,一般的经验是在访问表中很少一部分数据时使用B+树索引才有意义
  如果某个字段的取值范围很广,几乎没有重复,即属于高选择性,则此时使用B+树索引是最合适的

  如何查看索引是否是高选择性呢？可以通过show index结果中的列Cardinality来观察
  Cardinality这个值表示索引中不重复记录数量的预估值,在实际应用中,Cardinality/n_rows_in_table=应尽可能的接近1
  如果这两者相除的结果非常小,那么用户需要考虑是否还有必要创建这个索引

  所以在访问高选择性的字段并从表中取出很少一部分的数据时,对这个字段添加B+树索引是非常有必要的

  在InnoDB存储引擎中,Cardinality统计信息的更新发生在两个操作中：insert和update
  InnoDB内部更新Cardinality信息的策略为：表中1/16的数据已发生变化;stat_modified_counter>20亿
  这4个参数需要注意：innodb_stats_persistent、innodb_stats_on_metadata、innodb_stats_persistent_sample_pages、innodb_stats_transient_sample_pages

9B+树索引的使用
  (1)联合索引：
             好处：可以对多个列进行索引、会对联合索引里的列一次进行排序处理
             eg:联合索引(a,b,c),select * from t1 where a=xxx order by c;可以用到(a,b,c)的联合索引,但是需要进行一个filesort排序

  (2)覆盖索引：
             从辅助索引中就可以得到查询的记录,而不需要查询聚集索引中的记录
             好处：使用覆盖索引的一个好处是辅助索引不包含整行记录的所有信息,故其大小远小于聚集索引(叶子节点包含所有行的记录信息),因此可以减少大量的IO操作

10MRR优化(Multi-Range Read,5.6支持),索引优化
  可以在show index from t1;看到using MRR
  目的是为了减少磁盘的随机访问,并且将随机访问转化为较为顺序的数据访问
  Multi优化可使用于：range、ref、eq_ref
  好处： 
      MRR使数据访问变得较为顺序,在查询辅助索引时首先根据得到的查询结果,按照主键进行排序,并按照主键的顺序进行书签查找
      减少缓冲池中页被替换的次数
      批量处理对键值的查询操作
  启用:set @@optimizer_swith='mrr=on,mrr_cost_based=off';启用并总是启用
      set @@optimizer_swith='mrr=on,mrr_cost_based=on';启用但是需要看是否通过cost based的方式来选择是否启用mrr
  参数read_rnd_buffer_size(默认256K)用来控制键值的缓冲区大小,当大于该值时,则执行器对已经缓存的数据根据RowID进行排序,并通过RowID来取数据

11ICP优化(Index Condition Pushdown),索引优化
  可以在show index from table_name;中看到using index Condition
  ICP:MySQL数据库会在取出索引的同时,判断是否可以进行where条件的过滤,也就是将where的部分过滤操作放到了存储引擎层,在某些查询下,可以大大减少上层SQL层对记录的索取(fetch),从而提高数据库的整体性能
  启用：set @@optimizer_swith='index_condition_pushdown=on';

12全文检索(Full Text Search)
  概念：是将存储于数据库中的整本书或整篇文章中的任意内容信息查找出来的技术,它可以根据需要获得全文中有关章、节、段、句、词等信息,也可以进行各种统计和分析
        InnoDB从1.2.x版本开始支持全文检索,其支持MyISAM存储引擎的全部功能,并且还支持其他的一些特性

  全文检索通常使用倒排索引(inverted index)来实现,倒排索引在辅助表中存储了单词和单词自身在一个或多个文档所在位置之间的映射,这通常利用关联数组实现