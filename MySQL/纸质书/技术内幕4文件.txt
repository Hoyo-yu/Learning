1参数文件
动态参数(global):该参数修改的是基于整个实例的生命周期
set global key=value;
set @@global.key=value;
静态参数(session):该参数修改的是基于当前会话
set session key=value;
set @@session.key=value;

2日志文件
mysql中,主要存在5种日志：
错误日志(error log)：记录mysql服务的启停时正确和错误的信息，还记录启动、停止、运行过程中的错误信息
查询日志(general log)：记录建立的客户端连接和执行的语句,可以通过开启general log来记录某些执行过程(mysqldump备份的过程,主从一致性校验等)
二进制日志(bin log)：记录所有更改数据的语句，可用于数据复制

#拓展

二进制文件的三种日志格式：statement row mixed
statement优：写入日志文件的数据更少,意味着可以更快的完成备份和还原操作;日志文件包含了所有进行了任何更改的语句,因此它们可用于审核数据库。
         缺：存在不确定的行为,可能导致主从不一致的问题
row优：可以复制所有更改,这是最安全的复制形式;
   缺：日志量大,影响主从复制的时间(full),虽然说可以通过设置binlog_row_image=minimal来减少日志的生成量,但不建议
       数据被误更改，无法用mysqlbinlog等工具闪回,容易造成数据不一致的问题
mixed优：混合模式是STATEMENT和ROW格式的混合使用，判断使用哪种格式由数据库决定

show {binary,master} logs;查看使用了哪些日志文件
show binlog event in 'log_name' from pos;查看某个binlog某个位置的情况
show master status;显示朱服务器的二进制信息

分析binlog:mysqlbinlog -v --base64-output=decode-rows --start-position=1467(Exec_Master_Log_Pos) --stop-position=2125(Last_SQL_Error中的End_Master_Log_Pos) mysql-bin.000012(Relay_Master_Log_File) > xxx.sql

慢查询日志(slow log)：记录所有执行时间超过long_query_time的所有查询或不使用索引的查询
可以通过mysqldumpslow工具查看日志详情
-d           debug 
-v           verbose：显示详细信息
-t NUM       just show the top n queries：仅显示前n条查询
-a           don't abstract all numbers to N and strings to 'S'：归类时不要使用N替换数字,S替换字符串
-g PATTERN   grep: only consider stmts that include this string：通过grep来筛选select语句

中继日志(relay log)：主从复制时使用的日志,从库sql_thread会读取中继日志,并顺序执行该日志的sql事件,从而与主库的数据包保持一致

事务日志：
redo日志
undo日志:提供回滚和多版本并发控制
https://www.junmajinlong.com/mysql/index/

3套接字文件(socket文件)
show variables like 'socket';

4pid文件
当mysql实例启动时，会将自己的进程ID写入到一个文件中,改文件即为pid文件

5表结构定义文件
因为MySQL是插件式存储引擎的体系结构,MySQL数据的存储是根据表进行的,每个表都会有与之对应的文件,但不论表采用了何种存储引擎
MySQL都会有一个后缀名为frm的文件,这个文件记录了该表的表结构定义

其中视图的frm可以通过cat查看

6innodb存储引擎文件

6.1表空间文件：innodb采用将存储的数据按表空间(table space)进行存放的设计,在默认配置下会有一个初始大小为10M,名为ibdata1的文件
              改文件就是默认的表空间文件,用户可以通过参数innodb_data_file_path对其进行设置,设置这个参数后,所有基于innodb存储
              引擎的表的数据都会记录到该共享表空间中;若设置了参数innodb_file_per_table则用户可以将每个基于innodb引擎的表产生
              一个独立的表空间文件(.ibd),需要注意的是这些单独的表空间仅存储该表的数据、索引和插入缓冲BITMAP等信息,其余信息还是
              存放在默认的表空间中

6.2重做日志文件
在默认的情况下,在innodb存储引擎的数据目录下有两个名为ib_logfile0和ib_logfile1;重做日志对innodb存储引擎至关重要,他们记录的是
innodb存储引擎的事务日志.当实例或介质失败时,重做日志文件就能派上用场。
例如：数据库由于所在主机掉电导致实例失败,innodb存储引擎会使用重做日志恢复到掉电前的时刻,以此来保证数据库的完整性。

每个innodb存储引擎至少有一个重做日志组,每个文件组下至少有2个重做日志文件,如默认的ib_logfile0和ib_logfile1
为了得到更高的可靠性,用户可以设置多个的镜像日志组,将不同的文件组放到不同的磁盘上,以此提高重做日志的高可用性。
在日志组中每个重做日志文件的大小一致,并以循环写入的方式运行。

下列参数影响着重做日志文件的属性：

innodb_log_file_size
innodb_log_files_in_group
innodb_mirrored_log_groups(5.7之后已删除)
innodb_log_group_home_dir

同样是记录事务日志,重做日志和二进制日志的区别：
(1)二进制日志会记录所有与MySQL数据库有关的日志记录,包括innodb、myisam、Heap等其他引擎的日志
   而innodb存储引擎的重做日志至记录有关该引擎本身的事务日志
(2)记录的内容不同。无论用户将二进制日志文件记录格式设为statement还是row,又或者是mixed,其记录的都是一个事务的具体操作内容,即该日志是逻辑日志。
   innodb存储引擎的重做日志记录的是关于每个页的更改的物理情况。
(3)写入的时间也不同,二进制日志文件仅在事务提交前进行提交,即只写磁盘一次,不论该事务有多大;
   在事务的进行过程中,却不断有重做日志条目被写入到重做日志文件中

写入重做日志文件的操作不是直接写,而是先写入一个重做日志缓冲中,然后按一定的条件顺序写入到日志文件中
redo log buffer->redo log files(ib_logfile0,ib_logfile1...)

在重做日志缓冲(redo log block)往磁盘写入时,是按512个字节,也就是按一个扇区的大小进行写入,其中innodb的页大小是16k。因为扇区是写入的最小单位,因此可以保证写入必定是成功的
因此重做日志的写入过程不需要有doublewrite

