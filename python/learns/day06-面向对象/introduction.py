#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Author:Mario

'''
面向对象编程(OOP)介绍:

世界万物,皆可分类;世界万物,皆为对象.
只要是对象,就肯定属于某种品类.
只要是对象,就肯定有属性.
基于面向对象的编程可以使人更加理解代码逻辑.

class类:一个类即是对一类拥有相同属性的对象的抽象、蓝图、原型.在类中定义了这些对象都具备的属性、共同的方法.
object对象:一个类即是一个类实例化后的实例,一个类必须经过实例化方可在程序中调用.

三大特性:封装、继承、多态
封装:把一些功能的实现细节不对外暴露
继承:代码的重用
    单继承
    多继承
         2.x 经典类,深度优先;新式类,广度优先.
         3.x 均为广度优先

多态:接口的重用,一种接口,多种实现

对象:实例化一个类之后得到的对象,也成类的一个实例
属性:
    实例变量:
    类变量:
    私有属性:__var
方法:
    构造函数(方法)
    析构函数(方法)
    私有方法



'''


# eg
# object类是所有类都会继承的类
class dog(object):
    n = 123
    # 类变量,存在类的内存里.用途:大家共有的属性,节省开销.
    # 虽然也可以卸载构造函数里用默认参数的形式,但是每实例化一个对象都会消耗一定的内存
    name = "我是类name"

    def __init__(self, name):
        self.name = name  # 实例变量(静态属性),作用域是实例本身
        # self.__name为私有变量,实例的变量名如果以__开头,就变成了一个私有变量
        # 构造函数
        # 在实例化时做一些类的初始化的工作

    def bark(self):  # 类的方法(动态属性)
        print("%s:汪汪汪" % self.name)


d1 = dog("ab")  # 实例化,d1为dog这个类的实例
d2 = dog("bb")
d1.name = "aa"
d1.bark()  # dog.bark(d1)
d1.big_or_small = "big"  # 添加新的实例变量
# del d1.big_or_small # 删除某个变量
print(dog.n)
print(d1.n, d1.name, d1.big_or_small)  # 先找实例本身有没有这个n,没有去类里面找
print(d2.n, d2.name)
d1.n = "改了类变量"  # 相当于实例里添加新的实例变量
dog.n = 222
print("d1:", d1.n)
print("d2:", d2.n)
